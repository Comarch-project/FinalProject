main    lw   0   1   n                  // $1 = memory[n]
        lw   0   2   r                  // $2 = memory[r] both is our input for function
        lw   0   6   combAddr           // prepare to call combination function $6=combi
        jalr 6   7                      // call combi; $7 = return address
        halt
combi   lw   0   6   pos1               // $6 = 1
        add  5   6   5                  // increment stack pointer
        sw   5   7   stack              // save return address on stack
        add  5   6   5                  // increment stack pointer
        sw   5   1   stack              // save n on stack
        add  5   6   5                  // increment stack pointer
        sw   5   2   stack              // save r on stack
if      beq  2   0   then               // base_case scenario that if r == 0 go to then
        beq  2   1   then               // base_case scenario that if r == n go to then
else    lw   0   6   neg1               // $6 = -1
        add  1   6   1                  // decrement n (n-1)
        lw   0   6   combAddr           // $6 = combi
        jalr 6   7                      // call combi; $7 = return address
        lw   0   6   neg1               // $6 = -1
        lw   5   2   stack              // recover original $2
        add  5   6   5                  // decrement stack pointer
        lw   5   1   stack              // recover original $1 
        add  5   6   5                  // decrement stack pointer
        add  1   6   1                  // decrement n by 1
        add  2   6   2                  // decrement r by 1
        lw   0   6   combAddr           // $6 = combi
        jalr 6   7                      // call combi; $7 = return address
        lw   5   4   stack              // recover original return address
        lw   0   6   neg1               // $6 = -1
        add  5   6   5                  // decrement stack pointer
        jalr 4   0                      // return
then    add  6   3   3                  // $3 = value in register 6 + value in register 3 (1+0)
        lw   0   6   neg1               // $6 = -1
        add  5   6   5                  // decrement stack pointer
        add  5   6   5                  // decrement stack pointer
        lw   5   4   stack              // recover return address from stack
        add  5   6   5                  // decrement stack pointer
        jalr 4   0                      // return 
n        .fill  7
r        .fill  3
pos1     .fill  1
neg1     .fill -1
combAddr .fill combi
stack    .fill 0
